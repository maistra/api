// Copyright Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	internalinterfaces "maistra.io/api/client/informers/externalversions/internalinterfaces"
)

// Interface provides access to all the informers in this group version.
type Interface interface {
	// FederationStatuses returns a FederationStatusInformer.
	FederationStatuses() FederationStatusInformer
	// MeshFederations returns a MeshFederationInformer.
	MeshFederations() MeshFederationInformer
	// ServiceExports returns a ServiceExportsInformer.
	ServiceExports() ServiceExportsInformer
	// ServiceImports returns a ServiceImportsInformer.
	ServiceImports() ServiceImportsInformer
	// ServiceMeshControlPlanes returns a ServiceMeshControlPlaneInformer.
	ServiceMeshControlPlanes() ServiceMeshControlPlaneInformer
	// ServiceMeshExtensions returns a ServiceMeshExtensionInformer.
	ServiceMeshExtensions() ServiceMeshExtensionInformer
	// ServiceMeshMembers returns a ServiceMeshMemberInformer.
	ServiceMeshMembers() ServiceMeshMemberInformer
	// ServiceMeshMemberRolls returns a ServiceMeshMemberRollInformer.
	ServiceMeshMemberRolls() ServiceMeshMemberRollInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new Interface.
func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &version{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// FederationStatuses returns a FederationStatusInformer.
func (v *version) FederationStatuses() FederationStatusInformer {
	return &federationStatusInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// MeshFederations returns a MeshFederationInformer.
func (v *version) MeshFederations() MeshFederationInformer {
	return &meshFederationInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// ServiceExports returns a ServiceExportsInformer.
func (v *version) ServiceExports() ServiceExportsInformer {
	return &serviceExportsInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// ServiceImports returns a ServiceImportsInformer.
func (v *version) ServiceImports() ServiceImportsInformer {
	return &serviceImportsInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// ServiceMeshControlPlanes returns a ServiceMeshControlPlaneInformer.
func (v *version) ServiceMeshControlPlanes() ServiceMeshControlPlaneInformer {
	return &serviceMeshControlPlaneInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// ServiceMeshExtensions returns a ServiceMeshExtensionInformer.
func (v *version) ServiceMeshExtensions() ServiceMeshExtensionInformer {
	return &serviceMeshExtensionInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// ServiceMeshMembers returns a ServiceMeshMemberInformer.
func (v *version) ServiceMeshMembers() ServiceMeshMemberInformer {
	return &serviceMeshMemberInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// ServiceMeshMemberRolls returns a ServiceMeshMemberRollInformer.
func (v *version) ServiceMeshMemberRolls() ServiceMeshMemberRollInformer {
	return &serviceMeshMemberRollInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}
